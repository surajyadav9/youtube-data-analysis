# Purpose - was to use Glue Visual ETL job to read partitioned catalog table of raw CSV data and apply data type transformations and write back to a new S3 bucket.
#  - but due to it's limitations with special data encodings I had to edit and try to make it work.
#  - but it didn't. 
# Below code template is generated by AWS Glue ETL Visual job with few force modifications in the script.

import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsgluedq.transforms import EvaluateDataQuality
from awsglue.dynamicframe import DynamicFrame
from pyspark.sql.functions import input_file_name, regexp_extract
from pyspark.sql.types import LongType
from pyspark.sql.functions import col

# Get job arguments
args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Default ruleset used by all target nodes with data quality enabled
DEFAULT_DATA_QUALITY_RULESET = """
    Rules = [
        ColumnCount > 0
    ]
"""



# step 1: Read CSV files directly from S3 with UTF-8 encoding
df = spark.read \
    .option("header", "true") \
    .option("multiLine", "true") \
    .option("quote", "\"") \
    .option("escape", "\"") \
    .option("encoding", "UTF-8") \
    .csv("s3://youtubeanalysis-raw-useast1-315380538310-dev/youtube-data/raw_data/")

# step 2: Extract the 'region' value from the file path
df = df.withColumn("region", regexp_extract(input_file_name(), r"region=([^/]+)", 1))


# df.show(5, truncate=False)

# Explicitly cast all numeric columns to LongType
df = df.withColumn("category_id", col("category_id").cast(LongType()))
df = df.withColumn("views", col("views").cast(LongType()))
df = df.withColumn("likes", col("likes").cast(LongType()))
df = df.withColumn("dislikes", col("dislikes").cast(LongType()))
df = df.withColumn("comment_count", col("comment_count").cast(LongType()))


# step 3: Convert Spark DataFrame to Glue DynamicFrame
AWSGlueDataCatalog_node1752328530831 = DynamicFrame.fromDF(df, glueContext, "custom_source")



# Script generated for node AWS Glue Data Catalog
# AWSGlueDataCatalog_node1752328530831 = glueContext.create_dynamic_frame.from_catalog(database="youtubeanalysis-raw-db", table_name="raw_data", transformation_ctx="AWSGlueDataCatalog_node1752328530831")

# Script generated for node Change Schema
ChangeSchema_node1752329386181 = ApplyMapping.apply(frame=AWSGlueDataCatalog_node1752328530831, mappings=[("video_id", "string", "video_id", "string"), ("trending_date", "string", "trending_date", "string"), ("title", "string", "title", "string"), ("channel_title", "string", "channel_title", "string"), ("category_id", "long", "category_id", "bigint"), ("publish_time", "string", "publish_time", "string"), ("tags", "string", "tags", "string"), ("views", "long", "views", "bigint"), ("likes", "long", "likes", "bigint"), ("dislikes", "long", "dislikes", "bigint"), ("comment_count", "long", "comment_count", "bigint"), ("thumbnail_link", "string", "thumbnail_link", "string"), ("comments_disabled", "boolean", "comments_disabled", "boolean"), ("ratings_disabled", "boolean", "ratings_disabled", "boolean"), ("video_error_or_removed", "boolean", "video_error_or_removed", "boolean"), ("description", "string", "description", "string"), ("region", "string", "region", "string")], transformation_ctx="ChangeSchema_node1752329386181")

# Script generated for node Amazon S3
EvaluateDataQuality().process_rows(frame=ChangeSchema_node1752329386181, ruleset=DEFAULT_DATA_QUALITY_RULESET, publishing_options={"dataQualityEvaluationContext": "EvaluateDataQuality_node1752328526938", "enableDataQualityResultsPublishing": True}, additional_options={"dataQualityResultsPublishing.strategy": "BEST_EFFORT", "observations.scope": "ALL"})
AmazonS3_node1752330032496 = glueContext.write_dynamic_frame.from_options(frame=ChangeSchema_node1752329386181, connection_type="s3", format="glueparquet", connection_options={"path": "s3://youtubeanalysis-cleansed-useast1-315380538310-lambda/youtube/raw_data_transformed/", "partitionKeys": ["region"]}, format_options={"compression": "snappy"}, transformation_ctx="AmazonS3_node1752330032496")

job.commit()
